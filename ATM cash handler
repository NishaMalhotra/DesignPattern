/******************************************************************************

ATM - Cash dispenser handler - if we had note 2000, 1000, 500, 10, how exactly it will be handled using chain of respnsibility.

*******************************************************************************/
#include <iostream>
using namespace std;
class baseHandler //abstract class
{
    protected:
        int amount;
        baseHandler* nextHandler;
    public:
        baseHandler(){
            //cout<<"base can handle"<<endl;
        }
        virtual void canServeAmount(int amt) = 0;
};
class CantBeServed: public baseHandler
{
    public:
        CantBeServed(baseHandler* obj){
            nextHandler = obj;
        }
        void canServeAmount(int amt)
        {
            cout<<"CantBeServed"<<endl;
        }
};
class TenHandler : public baseHandler//10
{
    private:
        int noOfNotes = 5;
    public:
        TenHandler(baseHandler* obj)
        {
            nextHandler = obj;
        }
        void canServeAmount(int amt)
        {
            //need to serve amt, check if feasible to server? 
            int noteNeeded = amt/10;
            if(noteNeeded < noOfNotes)
            {
                int remainAmount = amt - (noteNeeded*10);//get 1000
                cout<<"served "<<noteNeeded<<"for 10 rs"<<endl;
                if(remainAmount > 0)
                    nextHandler->canServeAmount(remainAmount);
            }
        }
};
class HundredHandler : public baseHandler//100
{
    private:
        int noOfNotes =5;
    public:
        HundredHandler(baseHandler* obj)
        {
            nextHandler = obj;
        }
        void canServeAmount(int amt)
        {
            //need to serve amt, check if feasible to server? 
            int noteNeeded = amt/100;
            if(noteNeeded < noOfNotes)
            {
                int remainAmount = amt - (noteNeeded*100);//get 1000
                cout<<"served "<<noteNeeded<<"for 100 rs "<<"remainAmount is: "<<remainAmount<<endl;
                if(remainAmount >= 0)
                    nextHandler->canServeAmount(remainAmount);
            }
        }
};
class FiveHundredHandler : public baseHandler//500
{
    private:
        int noOfNotes = 5;
    public:
        FiveHundredHandler(baseHandler* obj)
        {
           nextHandler = obj;
        }
        void canServeAmount(int amt)
        {
            //need to serve amt, check if feasible to server? 
            int noteNeeded = amt/500;
            if(noteNeeded < noOfNotes)
            {
                int remainAmount = amt - (noteNeeded*500);//get 1000
                cout<<"served "<<noteNeeded<<"for 500 rs"<<endl;
                if(remainAmount > 0)
                    nextHandler->canServeAmount(remainAmount);
            }
        }
};
class TwoThousandHandler : public baseHandler //2000 rs
{
    private:
        int noOfNotes = 5;
    public:
        TwoThousandHandler(baseHandler* obj)
        {
            nextHandler = obj;
        }
        void canServeAmount(int amt)
        {
            //need to serve amt, check if feasible to server? 
            int noteNeeded = amt/2000;
            if(noteNeeded < noOfNotes)
            {
                cout<<"served "<<noteNeeded<<"for 2000 rs"<<endl;
                int remainAmount = amt - (noteNeeded*2000);
                if(remainAmount > 0)
                    nextHandler->canServeAmount(remainAmount);
            }
        }
};
class ATM 
{
    protected:
        baseHandler* b;
    private:
        int TwoThousandCount;
        int FiveHundredCount;
        int HundredCount;
        int TenCount;
    public:
        ATM(int TwoThousandCount = 0, int FiveHundredCount = 0,int HundredCount = 0, int TenCount = 0)
        {
            this->TwoThousandCount = TwoThousandCount;
            this->FiveHundredCount = FiveHundredCount;
            this->HundredCount = HundredCount;
            this->TenCount = TenCount;
        }
        void withdraw(int amount)
        {
            b = new TwoThousandHandler(new FiveHundredHandler(new HundredHandler(new TenHandler(new CantBeServed(NULL)))));
            b->canServeAmount(amount);
        }
};
int main()
{
    ATM *a = new ATM(50,50,50,50);//2000, 500, 100, 10 
    int AmountToWithdraw = 3530;
    a->withdraw(AmountToWithdraw);
    return 0;
}
